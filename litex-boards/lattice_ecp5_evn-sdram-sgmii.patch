diff --git a/litex_boards/platforms/lattice_ecp5_evn.py b/litex_boards/platforms/lattice_ecp5_evn.py
index 1a96862..c93c624 100644
--- a/litex_boards/platforms/lattice_ecp5_evn.py
+++ b/litex_boards/platforms/lattice_ecp5_evn.py
@@ -25,14 +25,14 @@ _io = [
     ("rst_n",        0, Pins("G2"),  IOStandard("LVCMOS33")),
 
     # Leds
-    ("user_led", 0, Pins("A13"), IOStandard("LVCMOS25")),
-    ("user_led", 1, Pins("A12"), IOStandard("LVCMOS25")),
-    ("user_led", 2, Pins("B19"), IOStandard("LVCMOS25")),
-    ("user_led", 3, Pins("A18"), IOStandard("LVCMOS25")),
-    ("user_led", 4, Pins("B18"), IOStandard("LVCMOS25")),
-    ("user_led", 5, Pins("C17"), IOStandard("LVCMOS25")),
-    ("user_led", 6, Pins("A17"), IOStandard("LVCMOS25")),
-    ("user_led", 7, Pins("B17"), IOStandard("LVCMOS25")),
+    ("user_led", 0, Pins("A13"), IOStandard("LVCMOS33"), Misc("OPENDRAIN=ON")),
+    ("user_led", 1, Pins("A12"), IOStandard("LVCMOS33"), Misc("OPENDRAIN=ON")),
+    ("user_led", 2, Pins("B19"), IOStandard("LVCMOS33"), Misc("OPENDRAIN=ON")),
+    ("user_led", 3, Pins("A18"), IOStandard("LVCMOS33"), Misc("OPENDRAIN=ON")),
+    ("user_led", 4, Pins("B18"), IOStandard("LVCMOS33"), Misc("OPENDRAIN=ON")),
+    ("user_led", 5, Pins("C17"), IOStandard("LVCMOS33"), Misc("OPENDRAIN=ON")),
+    ("user_led", 6, Pins("A17"), IOStandard("LVCMOS33"), Misc("OPENDRAIN=ON")),
+    ("user_led", 7, Pins("B17"), IOStandard("LVCMOS33"), Misc("OPENDRAIN=ON")),
 
     # Buttons
     ("user_dip_btn", 1, Pins("J1"),  IOStandard("LVCMOS33")),
@@ -52,6 +52,26 @@ _io = [
         Subsignal("tx", Pins("P3"), IOStandard("LVCMOS33")),
     ),
 
+    # SDR SDRAM on connector J39 and J40
+    ("sdram_clock", 0, Pins("K5"), IOStandard("LVCMOS33")),
+    ("sdram", 0,
+        Subsignal("a",     Pins(
+            "B10 E7  A11 A19 K4  D14 P1  C14",
+            "L1  L2  A9  N2  L3")),
+        Subsignal("dq",    Pins(
+            "D15 B15 C15 B13 B20 D11 E11 B12",
+            "N4  M4  L4  J3  J4  H2  A15 K2")),
+        Subsignal("we_n",  Pins("D12")),
+        Subsignal("ras_n", Pins("C13")),
+        Subsignal("cas_n", Pins("E12")),
+        Subsignal("cs_n",  Pins("D13")),
+        Subsignal("cke",   Pins("M5")),
+        Subsignal("ba",    Pins("E13 A14")),
+        Subsignal("dm",    Pins("C12 N3")),
+        IOStandard("LVCMOS33"),
+        Misc("SLEWRATE=FAST"),
+    ),
+
     # SPIFlash
     ("spiflash", 0,
         Subsignal("cs_n", Pins("R2"), IOStandard("LVCMOS33")),
@@ -64,6 +84,39 @@ _io = [
         Subsignal("cs_n", Pins("R2"),          IOStandard("LVCMOS33")),
         Subsignal("dq",   Pins("W2 V2 Y2 W1"), IOStandard("LVCMOS33")),
     ),
+
+    # Ether mdio/mdc
+    ("eth_md", 0,
+        Subsignal("mdio",    Pins("M19")),
+        Subsignal("mdc",     Pins("M20")),
+        IOStandard("LVCMOS25")
+    ),
+
+    # SerDes
+    ("serdes_tx", 0,
+        Subsignal("p", Pins("W4")),
+        Subsignal("n", Pins("W5")),
+    ),
+    ("serdes_rx", 0,
+        Subsignal("p", Pins("Y5")),
+        Subsignal("n", Pins("Y6")),
+    ),
+    ("serdes_refclk", 0,
+        Subsignal("p", Pins("Y11")),
+        Subsignal("n", Pins("Y12")),
+    ),
+
+    # Tap
+    ("tp0", 0, Pins("C6"), IOStandard("LVCMOS33")),
+    ("tp1", 0, Pins("C7"), IOStandard("LVCMOS33")),
+    ("tp2", 0, Pins("C8"), IOStandard("LVCMOS33")),
+
+    # Brigde
+    ("uart_bridge", 0,
+        Subsignal("tx", Pins("A7")),
+        Subsignal("rx", Pins("A8")),
+        IOStandard("LVCMOS33")
+    ),
 ]
 
 # Connectors ---------------------------------------------------------------------------------------
diff --git a/litex_boards/targets/lattice_ecp5_evn.py b/litex_boards/targets/lattice_ecp5_evn.py
index 3ce9335..6165c19 100755
--- a/litex_boards/targets/lattice_ecp5_evn.py
+++ b/litex_boards/targets/lattice_ecp5_evn.py
@@ -12,6 +12,8 @@ import argparse
 from migen import *
 from migen.genlib.resetsync import AsyncResetSynchronizer
 
+from litex.build.io import DDROutput
+
 from litex_boards.platforms import ecp5_evn
 
 from litex.soc.cores.clock import *
@@ -19,12 +21,23 @@ from litex.soc.integration.soc_core import *
 from litex.soc.integration.builder import *
 from litex.soc.cores.led import LedChaser
 
+from litedram import modules as litedram_modules
+from litedram.phy import GENSDRPHY, HalfRateGENSDRPHY
+
+from liteeth.phy.ecp5sgmii import LiteEthPHYSGMII
+
 # CRG ----------------------------------------------------------------------------------------------
 
 class _CRG(Module):
-    def __init__(self, platform, sys_clk_freq, x5_clk_freq):
+    def __init__(self, platform, sys_clk_freq, x5_clk_freq,
+                 sdram_rate="1:1", ether_refclk_freq=None):
         self.rst = Signal()
         self.clock_domains.cd_sys = ClockDomain()
+        if sdram_rate == "1:2":
+            self.clock_domains.cd_sys2x    = ClockDomain()
+            self.clock_domains.cd_sys2x_ps = ClockDomain(reset_less=True)
+        else:
+            self.clock_domains.cd_sys_ps = ClockDomain(reset_less=True)
 
         # # #
 
@@ -41,11 +54,31 @@ class _CRG(Module):
         self.comb += pll.reset.eq(~rst_n | self.rst)
         pll.register_clkin(clk, x5_clk_freq or 12e6)
         pll.create_clkout(self.cd_sys, sys_clk_freq)
+        if sdram_rate == "1:2":
+            pll.create_clkout(self.cd_sys2x,    2*sys_clk_freq)
+            pll.create_clkout(self.cd_sys2x_ps, 2*sys_clk_freq, phase=180) # Idealy 90Â° but needs to be increased.
+        else:
+           pll.create_clkout(self.cd_sys_ps, sys_clk_freq, phase=90)
+
+        # SDRAM clock
+        sdram_clk = ClockSignal("sys2x_ps" if sdram_rate == "1:2" else "sys_ps")
+        self.specials += DDROutput(1, 0, platform.request("sdram_clock"), sdram_clk)
+
+        # Ether clock
+        if ether_refclk_freq is not None:
+            if x5_clk_freq is None:
+                self.clock_domains.cd_clk50 = ClockDomain(reset_less=True)
+                pll.create_clkout(self.cd_clk50, 50e6, margin=0)
+                clk50 = self.cd_clk50.clk
+            self.clock_domains.cd_eth_ref = ClockDomain(reset_less=True)
+            self.submodules.pll_eth = pll_eth = ECP5PLL()
+            pll_eth.register_clkin(clk50, x5_clk_freq or 50e6)
+            pll_eth.create_clkout(self.cd_eth_ref, ether_refclk_freq, margin=0)
 
 # BaseSoC ------------------------------------------------------------------------------------------
 
 class BaseSoC(SoCCore):
-    def __init__(self, sys_clk_freq=int(50e6), x5_clk_freq=None, toolchain="trellis", **kwargs):
+    def __init__(self, sys_clk_freq=int(50e6), x5_clk_freq=None, toolchain="trellis", sdram_module_cls="AS4C32M16", sdram_rate="1:1", with_ethernet=False, with_etherbone=False, local_ip="", remote_ip="", with_scope=False, **kwargs):
         platform = ecp5_evn.Platform(toolchain=toolchain)
 
         # SoCCore ----------------------------------------------------------------------------------
@@ -55,13 +88,108 @@ class BaseSoC(SoCCore):
             **kwargs)
 
         # CRG --------------------------------------------------------------------------------------
-        crg = _CRG(platform, sys_clk_freq, x5_clk_freq)
+        ether_refclk_freq=125e6 if with_ethernet or with_etherbone else None
+        crg = _CRG(platform, sys_clk_freq, x5_clk_freq,
+                   sdram_rate=sdram_rate, ether_refclk_freq=ether_refclk_freq)
         self.submodules.crg = crg
 
+        # SDR SDRAM --------------------------------------------------------------------------------
+        if not self.integrated_main_ram_size:
+            sdrphy_cls = HalfRateGENSDRPHY if sdram_rate == "1:2" else GENSDRPHY
+            self.submodules.sdrphy = sdrphy_cls(platform.request("sdram"), sys_clk_freq)
+            self.add_sdram("sdram",
+                phy                     = self.sdrphy,
+                module                  = getattr(litedram_modules, sdram_module_cls)(sys_clk_freq, sdram_rate),
+                origin                  = self.mem_map["main_ram"],
+                size                    = kwargs.get("max_sdram_size", 0x40000000),
+                l2_cache_size           = kwargs.get("l2_size", 8192),
+                l2_cache_min_data_width = kwargs.get("min_l2_data_width", 128),
+                l2_cache_reverse        = True
+            )
+
+        # Ethernet / Etherbone ---------------------------------------------------------------------
+        if with_ethernet or with_etherbone:
+            ethphy = LiteEthPHYSGMII(platform, crg.cd_eth_ref.clk)
+            self.submodules.ethphy = ethphy
+            self.add_csr("ethphy")
+            if with_ethernet:
+                self.add_ethernet(phy=self.ethphy)
+            if with_etherbone:
+                self.add_etherbone(phy=self.ethphy)
+
+        if local_ip:
+            local_ip = local_ip.split(".")
+            self.add_constant("LOCALIP1", int(local_ip[0]))
+            self.add_constant("LOCALIP2", int(local_ip[1]))
+            self.add_constant("LOCALIP3", int(local_ip[2]))
+            self.add_constant("LOCALIP4", int(local_ip[3]))
+
+        if remote_ip:
+            remote_ip = remote_ip.split(".")
+            self.add_constant("REMOTEIP1", int(remote_ip[0]))
+            self.add_constant("REMOTEIP2", int(remote_ip[1]))
+            self.add_constant("REMOTEIP3", int(remote_ip[2]))
+            self.add_constant("REMOTEIP4", int(remote_ip[3]))
+
         # Leds -------------------------------------------------------------------------------------
-        self.submodules.leds = LedChaser(
-            pads         = platform.request_all("user_led"),
-            sys_clk_freq = sys_clk_freq)
+        #self.submodules.leds = LedChaser(
+        #    pads         = platform.request_all("user_led"),
+        #    sys_clk_freq = sys_clk_freq)
+        #self.add_csr("leds")
+        #
+        # Debug ethphy
+        leds = platform.request_all("user_led")
+        self.comb += [
+            leds[0].eq(~ethphy.pcs.rx_enable),
+            leds[1].eq(~ethphy.pcs.tx_enable),
+            leds[2].eq(0),
+            leds[3].eq(0),
+            leds[4].eq(ethphy.pcs.init.pcs_rst),
+            leds[5].eq(ethphy.pcs.init.tx_lol),
+            leds[6].eq(ethphy.pcs.init.rx_lol),
+            leds[7].eq(ethphy.pcs.init.rx_los)
+        ]
+
+        # Analyzer ---------------------------------------------------------------------------------
+        if with_scope:
+            from litescope import LiteScopeAnalyzer
+            # Use uart bridge to analyze ethphy
+            self.add_uartbone(name="uart_bridge")
+            self.submodules.analyzer = LiteScopeAnalyzer([
+                #ethphy.pcs.init.tx_rst,
+                #ethphy.pcs.init.rx_rst,
+                #ethphy.pcs.init.pcs_rst,
+                #ethphy.pcs.init.ready,
+                #ethphy.pcs.init.tx_lol,
+                #ethphy.pcs.init.rx_lol,
+                #ethphy.pcs.init.rx_los,
+                #ethphy.pcs.rx_enable,
+                #ethphy.pcs.rx_ready,
+                #ethphy.pcs.rx_idle,
+                #ethphy.pcs.rx_align,
+                #ethphy.pcs.rx_data,
+                #ethphy.pcs.rx_k,
+                #ethphy.pcs.tx_enable,
+                #ethphy.pcs.tx_ready,
+                #ethphy.pcs.tx_idle,
+                #ethphy.pcs.tx_data,
+                #ethphy.pcs.tx_k,
+                ethphy.pcs.source,
+                ethphy.pcs.sink,
+                #ethphy.fsm,
+                #ethphy.tx.fsm,
+                #ethphy.tx.sink,
+                #ethphy.rx.fsm,
+                #ethphy.rx.source,
+                #ethphy.tx.config_stb,
+                #ethphy.tx.config_reg,
+                #ethphy.rx.seen_config_reg,
+                #ethphy.rx.seen_valid_ci,
+                #ethphy.rx.config_reg,
+                #ethphy.link_partner_adv_ability,
+            ], clock_domain = "eth_rx", depth=512)
+            self.add_csr("analyzer")
+
 
 # Build --------------------------------------------------------------------------------------------
 
@@ -72,13 +200,28 @@ def main():
     parser.add_argument("--toolchain",    default="trellis",   help="FPGA toolchain: trellis (default) or diamond")
     parser.add_argument("--sys-clk-freq", default=60e6,        help="System clock frequency (default: 60MHz)")
     parser.add_argument("--x5-clk-freq",  type=int,            help="Use X5 oscillator as system clock at the specified frequency")
+    parser.add_argument("--sdram-module",    default="AS4C32M16", help="SDRAM module: AS4C32M16(default) or AS4C16M16")
+    parser.add_argument("--sdram-rate",      default="1:1",         help="SDRAM Rate: 1:1 Full Rate (default), 1:2 Half Rate")
+    ethopts = parser.add_mutually_exclusive_group()
+    ethopts.add_argument("--with-ethernet",   action="store_true",      help="Enable Ethernet support")
+    ethopts.add_argument("--with-etherbone",  action="store_true",      help="Enable Etherbone support")
+    parser.add_argument("--remote-ip",        default="192.168.1.100",  help="Remote IP address of TFTP server")
+    parser.add_argument("--local-ip",         default="192.168.1.50",   help="Local IP address")
+    parser.add_argument("--with-scope",      action="store_true",      help="Enable LiteScope Analyzer support")
     builder_args(parser)
     soc_core_args(parser)
     args = parser.parse_args()
 
     soc = BaseSoC(toolchain=args.toolchain,
-        sys_clk_freq = int(float(args.sys_clk_freq)),
-        x5_clk_freq  = args.x5_clk_freq,
+        sys_clk_freq     = int(float(args.sys_clk_freq)),
+        x5_clk_freq      = args.x5_clk_freq,
+        sdram_module_cls = args.sdram_module,
+        sdram_rate       = args.sdram_rate,
+        with_ethernet    = args.with_ethernet,
+        with_etherbone   = args.with_etherbone,
+        local_ip         = args.local_ip,
+        remote_ip        = args.remote_ip,
+        with_scope       = args.with_scope,
         **soc_core_argdict(args))
     builder = Builder(soc, **builder_argdict(args))
     builder.build(run=args.build)
